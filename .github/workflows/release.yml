# Start of Github Workflow script

# Step 1: Trigger the workflow on a pull request merge event
on:
  pull_request:
    types:
      - opened
      - edited
    # This checks if the pull request has been merged and not just closed
    branches: [master]

# Step 2: Define the steps of the workflow
jobs:
  create_release:
    runs-on: ubuntu-latest

    # Step 2.1: Check if the pull request has the specific label
    steps:
      - name: Check Label
        id: check_label
        run: |
          echo "::set-env name=HAS_LABEL::false"
          if echo "${{ github.event.pull_request.labels }}" | grep -q "release"; then
              echo "::set-env name=HAS_LABEL::true"
          fi

      # Step 2.2: Get the plugin version from gradle.properties
      - name: Get Plugin Version
        if: env.HAS_LABEL == 'true'
        # Use the actions/download-artifact action to download the gradle.properties file
        uses: actions/download-artifact@v1
        with:
          name: gradle-properties
          path: gradle.properties

      # Step 2.3: Extract the plugin version
      - name: Extract Plugin Version
        if: env.HAS_LABEL == 'true'
        run: |
          echo "::set-env name=PLUGIN_VERSION::$(grep '^pluginVersion=' gradle.properties | cut -d '=' -f2)"

      # Step 2.4: Create a new release tag
      - name: Create Release
        if: env.HAS_LABEL == 'true'
        # Use the actions/create-release action to create a new release tag
        uses: actions/create-release@v1
        with:
          tag_name: "v${{ env.PLUGIN_VERSION }}"
          release_name: "Release v${{ env.PLUGIN_VERSION }}"
          body: "This is an empty release for version ${{ env.PLUGIN_VERSION }}"
          draft: false
          prerelease: false

# End of Github Workflow script
